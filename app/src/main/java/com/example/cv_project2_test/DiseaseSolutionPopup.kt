@file:OptIn(ExperimentalMaterial3Api::class)

// DiseaseSolutionPopup.kt
package com.example.cv_project2_test

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.ClickableText
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.*
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog

// ÏßàÎ≥ë ÏÜîÎ£®ÏÖò Îç∞Ïù¥ÌÑ∞
data class DiseaseSolution(
    val name: String,
    val symptoms: List<String>,
    val causes: List<String>,
    val treatments: List<String>,
    val prevention: List<String>
)

// Í≥†Ï∂î ÏßàÎ≥ë ÏÜîÎ£®ÏÖò Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§
object PepperSolutionDB {
    private val solutions = mapOf(
        "Í≥†Ï∂îÎßàÏùºÎìúÎ™®ÌãÄÎ∞îÏù¥Îü¨Ïä§" to DiseaseSolution(
            name = "Í≥†Ï∂îÎßàÏùºÎìúÎ™®ÌãÄÎ∞îÏù¥Îü¨Ïä§ (PMMoV)",
            symptoms = listOf(
                "ÏûéÏóê Ïó∞Ìïú ÎÖπÏÉâÍ≥º ÏßôÏùÄ ÎÖπÏÉâÏùò Î™®ÏûêÏù¥ÌÅ¨ Î¨¥Îä¨",
                "ÏûéÏùò Í∏∞Ìòï Î∞è Ï£ºÎ¶Ñ ÌòÑÏÉÅ",
                "ÏãùÎ¨º ÏÑ±Ïû• Ï†ÄÌï¥",
                "Í≥ºÏã§ ÌÅ¨Í∏∞ Í∞êÏÜå Î∞è Í∏∞Ìòï",
                "Í≥ºÏã§ ÌëúÎ©¥Ïùò Î∂àÍ∑úÏπôÌïú ÏÉâÍπî Î≥ÄÌôî"
            ),
            causes = listOf(
                "ÏßÑÎîßÎ¨ºÏùÑ ÌÜµÌïú Ï†ÑÏóº",
                "Í∞êÏóºÎêú Ï¢ÖÏûê ÏÇ¨Ïö©",
                "ÎÜçÍ∏∞Íµ¨Î•º ÌÜµÌïú Í∏∞Í≥ÑÏ†Å Ï†ÑÌåå",
                "ÏûëÏóÖÏûê ÏÜêÏùÑ ÌÜµÌïú Ï†ëÏ¥â Ï†ÑÏóº"
            ),
            treatments = listOf(
                "Í∞êÏóºÎêú ÏãùÎ¨º Ï¶âÏãú Ï†úÍ±∞ Î∞è ÏÜåÍ∞Å Ï≤òÎ¶¨",
                "ÏßÑÎîßÎ¨º Î∞©Ï†úÏö© ÏÇ¥Ï∂©Ï†ú ÏÇ¥Ìè¨ (Ïù¥ÎØ∏Îã§ÌÅ¥Î°úÌîÑÎ¶¨Îìú Í≥ÑÏó¥)",
                "ÌÜ†Ïñë ÌÉúÏñëÏó¥ ÏÜåÎèÖ ÎòêÎäî ÏÑùÌöåÏßàÏÜå Ï≤òÎ¶¨",
                "Í±¥Ï†ÑÌïú Î¨¥Î≥ë Ï¢ÖÏûêÎ°ú ÍµêÏ≤¥",
                "Í≤©Î¶¨ Ïû¨Î∞∞ Î∞è Î∞©Ï∂©Îßù ÏÑ§Ïπò"
            ),
            prevention = listOf(
                "Î∞îÏù¥Îü¨Ïä§ Î¨¥Î≥ë Ï¢ÖÏûê ÏÇ¨Ïö©",
                "ÏßÑÎîßÎ¨º ÏòàÎ∞© Î∞©Ï∂©Îßù ÏÑ§Ïπò",
                "ÏûëÏóÖ ÎèÑÍµ¨ 70% ÏïåÏΩîÏò¨ ÏÜåÎèÖ",
                "ÏûëÏóÖÏûê ÏÜê Ï≤†Ï†ÄÌïú ÏÜåÎèÖ",
                "ÏùòÏã¨ ÏãùÎ¨º Ï°∞Í∏∞ Î∞úÍ≤¨ Î∞è Í≤©Î¶¨"
            )
        ),
        "Í≥†Ï∂îÏ†êÎ¨¥Îä¨Î≥ë" to DiseaseSolution(
            name = "Í≥†Ï∂îÏ†êÎ¨¥Îä¨Î≥ë (Bacterial Spot)",
            symptoms = listOf(
                "ÏûéÏóê ÏûëÍ≥† Îë•Í∑º Í∞àÏÉâ Î∞òÏ†ê ÌòïÏÑ±",
                "Î∞òÏ†ê Ï£ºÏúÑ ÎÖ∏ÎûÄ ÌÖåÎëêÎ¶¨(Ìï†Î°ú) ÏÉùÏÑ±",
                "Ïã¨Ìïú Í≤ΩÏö∞ ÏûéÏù¥ ÎÖ∏ÎûóÍ≤å Î≥ÄÌïòÍ≥† ÎÇôÏóΩ",
                "Ï§ÑÍ∏∞ÏôÄ Í≥ºÏã§Ïóê Í≤ÄÏùÄ Î∞òÏ†ê ÌòïÏÑ±",
                "Í≥ºÏã§ ÌëúÎ©¥ Í±∞Ïπú ÏΩîÎ•¥ÌÅ¨Ïßà Î≥ëÎ∞ò"
            ),
            causes = listOf(
                "Xanthomonas ÏÑ∏Í∑† Í∞êÏóº",
                "Í≥†Ïò®Îã§Ïäµ ÌôòÍ≤Ω (25-30¬∞C, ÏäµÎèÑ 85% Ïù¥ÏÉÅ)",
                "Í≥ºÎèÑÌïú ÏßàÏÜå ÎπÑÎ£å ÏÇ¨Ïö©",
                "ÌÜµÌíç Î∂àÎüâÌïú Ïû¨Î∞∞ ÌôòÍ≤Ω",
                "ÎπóÎ¨ºÏù¥ÎÇò Í¥ÄÏàòÎ•º ÌÜµÌïú Ï†ÑÌåå"
            ),
            treatments = listOf(
                "Íµ¨Î¶¨ Í≥ÑÏó¥ ÏÇ¥Í∑†Ï†ú ÏÇ¥Ìè¨ (Ìô©ÏÇ∞Íµ¨Î¶¨, ÏàòÏÇ∞ÌôîÍµ¨Î¶¨)",
                "Ìï≠ÏÉùÏ†ú Í≥ÑÏó¥ ÏïΩÏ†ú ÏÇ¨Ïö© (Ïä§Ìä∏Î†ôÌÜ†ÎßàÏù¥Ïã†)",
                "Í∞êÏóºÎêú ÏûéÍ≥º Í≥ºÏã§ Ï¶âÏãú Ï†úÍ±∞",
                "ÌÜ†Ïñë Î∞∞Ïàò ÏãúÏÑ§ Í∞úÏÑ†",
                "ÏßàÏÜå ÎπÑÎ£å ÏÇ¨Ïö©Îüâ Ï†ÅÏ†ïÌôî"
            ),
            prevention = listOf(
                "Ï†ÄÌï≠ÏÑ± ÌíàÏ¢Ö Ïû¨Î∞∞ ÏÑ†ÌÉù",
                "Ï†ÅÏ†àÌïú Ïû¨ÏãùÍ±∞Î¶¨ Ïú†ÏßÄÎ°ú ÌÜµÌíç Í∞úÏÑ†",
                "Í¥ÄÏàò ÏãúÍ∞Ñ Ï°∞Ï†à (ÏûéÏóê Î¨ºÎ∞©Ïö∏ Ïû•ÏãúÍ∞Ñ ÏûîÎ•ò Î∞©ÏßÄ)",
                "ÌÜ†Ïñë Î∞∞Ïàò ÏãúÏÑ§ Í∞úÏÑ†",
                "ÏòàÎ∞©Ï†Å ÏÇ¥Í∑†Ï†ú Ï†ïÍ∏∞ ÏÇ¥Ìè¨"
            )
        )
    )

    fun getSolution(diseaseStatus: String): DiseaseSolution? {
        return solutions[diseaseStatus]
    }
}

// ÏßÑÎã® Í≤∞Í≥ºÏóê "ÎçîÎ≥¥Í∏∞" ÎßÅÌÅ¨Î•º Ï∂îÍ∞ÄÌïòÎäî Ïª¥Ìè¨Ï†ÄÎ∏î
@Composable
fun DiagnosisResultWithSolution(
    diseaseStatus: String, // ÏÑúÎ≤Ñ ÏùëÎãµÏùò disease_status Í∞í
    accuracy: Float,
    onBackClick: () -> Unit = {}
) {
    var showSolutionPopup by remember { mutableStateOf(false) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8FAF9))
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        // ÏßÑÎã® Í≤∞Í≥º ÌëúÏãú
        Card(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(12.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White)
        ) {
            Column(
                modifier = Modifier.padding(20.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Text(
                    text = "ÏßÑÎã® Í≤∞Í≥º",
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF111614)
                )

                Text(
                    text = diseaseStatus,
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFFE53E3E)
                )

                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Text(
                        text = "Ï†ïÌôïÎèÑ:",
                        fontSize = 16.sp,
                        color = Color(0xFF111614)
                    )
                    Text(
                        text = "${(accuracy * 100).toInt()}%",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF4CAF50)
                    )
                }

                // ÎçîÎ≥¥Í∏∞ ÎßÅÌÅ¨
                val annotatedString = buildAnnotatedString {
                    withStyle(
                        style = SpanStyle(
                            color = Color(0xFF2196F3),
                            fontSize = 14.sp,
                            textDecoration = TextDecoration.Underline
                        )
                    ) {
                        append("ÏπòÎ£åÎ≤ï Î∞è ÏòàÎ∞©Î≤ï ÏûêÏÑ∏Ìûà Î≥¥Í∏∞")
                    }
                }

                ClickableText(
                    text = annotatedString,
                    onClick = { showSolutionPopup = true },
                    modifier = Modifier.padding(top = 8.dp)
                )
            }
        }
    }

    // ÏÜîÎ£®ÏÖò ÌåùÏóÖ
    if (showSolutionPopup) {
        DiseaseSolutionPopup(
            diseaseStatus = diseaseStatus,
            onDismiss = { showSolutionPopup = false }
        )
    }
}

// ÏÜîÎ£®ÏÖò ÌåùÏóÖ Îã§Ïù¥ÏñºÎ°úÍ∑∏
@Composable
fun DiseaseSolutionPopup(
    diseaseStatus: String,
    onDismiss: () -> Unit
) {
    val solution = PepperSolutionDB.getSolution(diseaseStatus)

    Dialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .fillMaxHeight(0.85f),
            shape = RoundedCornerShape(16.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White)
        ) {
            Column(
                modifier = Modifier.fillMaxSize()
            ) {
                // Ìó§Îçî
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = solution?.name ?: diseaseStatus,
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF111614),
                        modifier = Modifier.weight(1f)
                    )

                    IconButton(onClick = onDismiss) {
                        Icon(
                            Icons.Default.Close,
                            contentDescription = "Îã´Í∏∞",
                            tint = Color(0xFF111614)
                        )
                    }
                }

                Divider(color = Color(0xFFE5E7EB))

                // ÎÇ¥Ïö©
                if (solution != null) {
                    LazyColumn(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp),
                        verticalArrangement = Arrangement.spacedBy(20.dp)
                    ) {
                        // Ï¶ùÏÉÅ
                        item {
                            SolutionSection(
                                title = "üîç Ï£ºÏöî Ï¶ùÏÉÅ",
                                items = solution.symptoms,
                                backgroundColor = Color(0xFFF3F4F6)
                            )
                        }

                        // ÏõêÏù∏
                        item {
                            SolutionSection(
                                title = "‚ö†Ô∏è Î∞úÏÉù ÏõêÏù∏",
                                items = solution.causes,
                                backgroundColor = Color(0xFFFEF3C7)
                            )
                        }

                        // ÏπòÎ£åÎ≤ï
                        item {
                            SolutionSection(
                                title = "üíä ÏπòÎ£å Î∞©Î≤ï",
                                items = solution.treatments,
                                backgroundColor = Color(0xFFDCFCE7)
                            )
                        }

                        // ÏòàÎ∞©Î≤ï
                        item {
                            SolutionSection(
                                title = "üõ°Ô∏è ÏòàÎ∞© Î∞©Î≤ï",
                                items = solution.prevention,
                                backgroundColor = Color(0xFFDFE5FF)
                            )
                        }
                    }
                } else {
                    // ÏÜîÎ£®ÏÖò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "Ìï¥Îãπ ÏßàÎ≥ëÏóê ÎåÄÌïú ÏÜîÎ£®ÏÖò Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.",
                            fontSize = 16.sp,
                            color = Color(0xFF6B7280)
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun SolutionSection(
    title: String,
    items: List<String>,
    backgroundColor: Color
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = backgroundColor)
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Text(
                text = title,
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF111614)
            )

            items.forEach { item ->
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Text(
                        text = "‚Ä¢",
                        fontSize = 14.sp,
                        color = Color(0xFF6B7280)
                    )
                    Text(
                        text = item,
                        fontSize = 14.sp,
                        color = Color(0xFF374151),
                        modifier = Modifier.weight(1f)
                    )
                }
            }
        }
    }
}

// ÏÇ¨Ïö© ÏòàÏãú
@Composable
fun ExampleUsage() {
    // ÏÑúÎ≤Ñ ÏùëÎãµÏóêÏÑú Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞
    val diseaseStatus = "Í≥†Ï∂îÎßàÏùºÎìúÎ™®ÌãÄÎ∞îÏù¥Îü¨Ïä§" // ÏÑúÎ≤Ñ ÏùëÎãµÏùò disease_status Í∞í
    val accuracy = 0.92f

    DiagnosisResultWithSolution(
        diseaseStatus = diseaseStatus,
        accuracy = accuracy
    )
}